debug: false
# actuator endpoint all active
management:
  endpoints:
    web:
      exposure:
        include: "*"

# log level 구체적으로 명시
logging:
  level:
    com.example.boardproject: debug
    org.springframework.web.servlet: debug # debug: false 한 다음 따로 이렇게 뽑자
#    org.hibernate.type.descriptor.sql.BasicBinder: trace # ? -> Binding Parameter 관찰 가능(개발 단계)

spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    defer-datasource-initialization: true # 초기 데이터를 생성하게 할 수 있다. -> data.sql(약속)
    hibernate:
      ddl-auto: create
    open-in-view: false
#    show-sql: true
    properties:
      hibernate.default_batch_fetch_size: 100 # N + 1 문제 해결 bulk query
  sql:
    init:
      mode: always  # data.sql 언제 작동 시킬것인가? ALWAYS, NEVER, EMBEDDED(임베디드 디비로 사용될 때만: TEST)
  data:
    rest:
      base-path: /api
      detection-strategy: annotated
  thymeleaf3:
    decoupled-logic: true
  # thymeleaf.cache: false
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"  # {baseUrl}: Spring Boot 가지고 있는 도메인 넣어준다. , {baseUrl}: 특수한 문자열 ""
            client-authentication-method: POST
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id  # naver, github에 따라 달라짐

# dev 환경에서
# spring.datasource.url: jdbc:h2:mem:testdb;MODE=MariaDB
# spring.datasource.username: sa
# spring.datasource.password:
# spring.datasource.driver-class-name: org.h2.Driver
# spring.h2.console.enabled: true

---

spring:
  config:
    activate:
      on-profile: heroku

  datasource:
    url: ${JAWSDB_URL}
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create
  sql:
    init:
      mode: always

---

spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;MODE=Mysql;DATABASE_TO_LOWER=TRUE
    driver-class-name: org.h2.Driver
  test:
    database:
      replace: none
